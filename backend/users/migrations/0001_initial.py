# Generated by Django 4.1.3 on 2023-06-16 11:22

import re

import django.core.validators
import django.utils.timezone
from django.db import migrations, models

import users.models
import users.validators


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "password",
                    models.CharField(max_length=128, verbose_name="password"),
                ),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        verbose_name="date joined",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 2-25 characters. Letters(a-z), digits and ./+/-/_ only.",
                        max_length=25,
                        unique=True,
                        validators=[
                            users.validators.UnicodeUsernameValidator(),
                            django.core.validators.MinLengthValidator(2),
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=129,
                        unique=True,
                        validators=[
                            django.core.validators.EmailValidator,
                            django.core.validators.MinLengthValidator(7),
                        ],
                        verbose_name="email",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^([^\\W\\d_]|[\\s-])+$"),
                                "Enter a valid `name` value consisting of only letters and symbols `-`.",
                                "invalid",
                            )
                        ],
                        verbose_name="first name",
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^([^\\W\\d_]|[\\s-])+$"),
                                "Enter a valid `name` value consisting of only letters and symbols `-`.",
                                "invalid",
                            )
                        ],
                        verbose_name="last name",
                    ),
                ),
                (
                    "avatar",
                    models.ImageField(
                        blank=True, upload_to="users", verbose_name="avatar"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "ordering": ["username"],
                "abstract": False,
            },
            managers=[
                ("objects", users.models.CustomUserManager()),
            ],
        ),
        migrations.AddConstraint(
            model_name="user",
            constraint=models.CheckConstraint(
                check=models.Q(("username__iexact", "ME"), _negated=True),
                name="reserve_USER_ME",
            ),
        ),
    ]
